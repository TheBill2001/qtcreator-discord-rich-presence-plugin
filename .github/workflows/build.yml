# Ref: https://github.com/CJCombrink/SpellChecker-Plugin/blob/2ccddd607e4f6da788eb7000a6d97ae8dfd0c4ee/.github/workflows/build.yaml
name: Build

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  QT_VERSION: "6.8.2"
  QT_CREATOR_VERSION: "15.0.0"
  KF_VERSION: "6.11.0"
  DISCORD_GAME_SDK_VERSION: "3.2.1"

defaults:
  run:
    shell: bash

jobs:
  discord_game_sdk:
    runs-on: ubuntu-latest
    name: Prepare Discord Game SDK
    env:
      DISCORD_GAME_SDK_PATH: downloads/discord_game_sdk
    outputs:
      cache_key: ${{ steps.cache.outputs.cache-primary-key }}
    steps:
    - name: Restore Discord Game SDK cache
      id: cache
      uses: actions/cache/restore@v4
      with:
        key: discord_game_sdk_v${{ env.DISCORD_GAME_SDK_VERSION }}
        path: ${{ env.DISCORD_GAME_SDK_PATH }}
        enableCrossOsArchive: true
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        mkdir -p "downloads"
        curl -JL -o "${{ env.DISCORD_GAME_SDK_PATH }}.zip" "https://dl-game-sdk.discordapp.net/${{ env.DISCORD_GAME_SDK_VERSION }}/discord_game_sdk.zip"
        unzip -d "${{ env.DISCORD_GAME_SDK_PATH }}" "${{ env.DISCORD_GAME_SDK_PATH }}.zip"
    - name: Save Discord Game SDK cache
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache.outputs.cache-primary-key }}
        path: "${{ env.DISCORD_GAME_SDK_PATH }}"
        enableCrossOsArchive: true
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
  build:
    name: Build ${{ matrix.config.name }}
    needs: [discord_game_sdk]
    runs-on: ${{ matrix.config.runner }}
    env:
      OS: ${{ matrix.config.name }}
      DISCORD_GAME_SDK_CACHE_KEY: ${{ needs.discord_game_sdk.outputs.cache_key }}
      DISCORD_GAME_SDK_PATH: downloads/discord_game_sdk
      ECM_CHECKOUT_PATH: downloads/extra-cmake-modules
      ECM_INSTALL_DIR: downloads/extra-cmake-modules/install
      QT_CREATOR_DIR: downloads/qtcreator
    strategy:
      matrix:
        config:
        - name: Windows x64
          runner: windows-latest
          qt_host: windows
          qt_arch: win64_msvc2022_64
          qtc_platform: windows_x64
        - name: Linux x64
          runner: ubuntu-latest
          qt_host: linux
          qt_arch: linux_gcc_64
          qtc_platform: linux_x64
        - name: MacOS x64
          runner: macos-13
          qt_host: mac
          qt_arch: clang_64
          qtc_platform: mac_x64
      fail-fast: false
    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v4
    - name: Restore Discord Game SDK cache
      uses: actions/cache/restore@v4
      with:
        key: ${{ env.DISCORD_GAME_SDK_CACHE_KEY }}
        path: ${{ env.DISCORD_GAME_SDK_PATH }}
        enableCrossOsArchive: true
    - name: Download Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        dir: downloads
        host: ${{ matrix.config.qt_host }}
        target: desktop
        arch: ${{ matrix.config.qt_arch }}
        modules: qt5compat
        cache: true
    - name: Restore Qt Creator cache
      id: qtcreator-cache
      uses: actions/cache/restore@v4
      with:
        key: qtcreator_${{ env.QT_CREATOR_VERSION }}_${{ runner.os }}_${{ runner.arch }}
        path: ${{ env.QT_CREATOR_DIR }}
    - name: Download Qt Creator
      if: ${{ steps.qtcreator-cache.outputs.cache-hit != 'true' }}
      run: |
        QT_CREATOR_BASE_URL="https://download.qt.io/official_releases/qtcreator/${QT_CREATOR_VERSION%.*}/${QT_CREATOR_VERSION}/installer_source/${{ matrix.config.qtc_platform }}"
        curl -JL -o "downloads/qtcreator.7z" "$QT_CREATOR_BASE_URL/qtcreator.7z"
        curl -JL -o "downloads/qtcreator_dev.7z" "$QT_CREATOR_BASE_URL/qtcreator_dev.7z"
        7z x downloads/qtcreator.7z -o"$QT_CREATOR_DIR" -y
        7z x downloads/qtcreator_dev.7z -o"$QT_CREATOR_DIR" -y
    - name: Save Qt Creator cache
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.qtcreator-cache.outputs.cache-primary-key }}
        path: ${{ env.QT_CREATOR_DIR }}
      if: ${{ steps.qtcreator-cache.outputs.cache-hit != 'true' }}
    - name: Restore ECM cache
      id: ecm-cache
      uses: actions/cache/restore@v4
      with:
        key: extra-cmake-modules_${{ runner.os }}_${{ runner.arch }}
        path: ${{ env.ECM_INSTALL_DIR }}
    - name: Checkout KDE/extra-cmake-modules
      uses: actions/checkout@v4
      if: ${{ steps.ecm-cache.outputs.cache-hit != 'true' }}
      with:
        repository: KDE/extra-cmake-modules
        path: ${{ env.ECM_CHECKOUT_PATH }}
        ref: v${{ env.KF_VERSION }}
    - name: Build ECM
      shell: bash
      if: ${{ steps.ecm-cache.outputs.cache-hit != 'true' }}
      run: |
        case "${{ runner.os }}" in
          "Windows")
            cmake -G "Visual Studio 17 2022" -S "${{ env.ECM_CHECKOUT_PATH }}" -B "${{ env.ECM_CHECKOUT_PATH }}/build" \
              -DCMAKE_INSTALL_PREFIX="${{ env.ECM_INSTALL_DIR }}" \
              -DBUILD_TESTING=OFF \
              -DBUILD_QTHELP_DOCS=OFF \
              -DBUILD_HTML_DOCS=OFF
            cmake --build "${{ env.ECM_CHECKOUT_PATH }}/build" --config Release
            ;;
          "Linux" | "macOS")
            cmake -S "${{ env.ECM_CHECKOUT_PATH }}" -B "${{ env.ECM_CHECKOUT_PATH }}/build" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="${{ env.ECM_INSTALL_DIR }}" \
              -DBUILD_TESTING=OFF \
              -DBUILD_QTHELP_DOCS=OFF \
              -DBUILD_HTML_DOCS=OFF
            cmake --build "${{ env.ECM_CHECKOUT_PATH }}/build"
            ;;
          *)
            echo "Unknow system ${{ runner.os }}"
            exit 1
        esac

        cmake --install "${{ env.ECM_CHECKOUT_PATH }}/build"
    - name: Save ECM cache
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.ecm-cache.outputs.cache-primary-key }}
        path: ${{ env.ECM_INSTALL_DIR }}
      if: ${{ steps.ecm-cache.outputs.cache-hit != 'true' }}
    - name: Build plugin
      run: |
        mkdir -p artifacts

        case "${{ runner.os }}" in
          "Windows")
            cmake -G "Visual Studio 17 2022" -S . -B build \
              -DCMAKE_INSTALL_PREFIX=install \
              -DCMAKE_PREFIX_PATH="${{ env.ECM_INSTALL_DIR }};${{ env.QT_CREATOR_DIR }}" \
              -DDISCORD_GAMESDK_PATH="${{ env.DISCORD_GAME_SDK_PATH }}"
            cmake --build build --config Release
            ;;
          "Linux" | "macOS")
            cmake -S . -B build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=install \
              -DCMAKE_PREFIX_PATH="${{ env.ECM_INSTALL_DIR }};${{ env.QT_CREATOR_DIR }};${{ env.QT_CREATOR_DIR }}/Qt Creator.app/Contents/Resources" \
              -DDISCORD_GAMESDK_PATH="${{ env.DISCORD_GAME_SDK_PATH }}"
            cmake --build build
            ;;
          *)
            echo "Unknow system ${{ runner.os }}"
            exit 1
        esac

        cmake --install build
    - name: Build portable plugin for Linux
      if: ${{ runner.os == 'Linux' }}
      run: |
        cmake -S . -B build_portable \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=install_portable \
            -DCMAKE_PREFIX_PATH="${{ env.ECM_INSTALL_DIR }};${{ env.QT_CREATOR_DIR }}" \
            -DDISCORD_GAMESDK_PATH="${{ env.DISCORD_GAME_SDK_PATH }}" \
            -DBUILD_PORTABLE=ON
        cmake --build build_portable
        cmake --install build_portable
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: qtcreator${{ env.QT_CREATOR_VERSION }}-discord-rich-presence-plugin-${{ matrix.config.qtc_platform }}
        path: install
    - name: Upload portable build artifact
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: qtcreator${{ env.QT_CREATOR_VERSION }}-discord-rich-presence-plugin-${{ matrix.config.qtc_platform }}-portable
        path: install_portable
  release:
    name: Create release
    if: contains(github.ref, '/tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false
      - name: Re-package artifacts for release
        run: |
          pushd artifacts

          for i in *; do
            pushd "$i"
            zip -r ../"$i".zip .
            popd
          done

          popd
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
          body: |
            Release for Qt Creator ${{ env.QT_CREATOR_VERSION }}.

            On Linux, there are two packages. The portable one includes `discord_game_sdk.so` while the other does not.
            If your distro does not include Discord Game SDK in its repos, use the portable package. Packages of platforms other than Linux are always portable.

            Install the plugin by open Qt Creator's Plugins dialog, `Help > About Plugins > Install Plugin`. Then select the **unextracted** package.
          prerelease: false
          draft: false
          files: artifacts/*.zip

